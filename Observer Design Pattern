- The Observer Design Pattern is a behavioral design pattern where an object, known as the subject, maintains a list of its dependents, called observers, and notifies them of any state changes, usually by calling one of their methods.
  This pattern is used when there is a one-to-many relationship between objects, and changes in one object need to be reflected in other objects without them being tightly coupled.

Explanation:
In the Observer pattern, there are three main components:

Subject: This is the object that holds some important state and needs to notify observers when the state changes.
Observer: This is the interface or abstract class that defines the method(s) that the subject can call to notify observers.
Concrete Observer: This is the implementation of the observer interface. It defines what actions should be taken when the observer is notified by the subject.


Let's explore the Observer Design Pattern with examples in JavaScript, Python, and Java, followed by its pros and cons, and a real-world scenario:

### JavaScript Example:

```javascript
// Subject
class Subject {
  constructor() {
    this.observers = [];
  }

  addObserver(observer) {
    this.observers.push(observer);
  }

  removeObserver(observer) {
    this.observers = this.observers.filter(obs => obs !== observer);
  }

  notifyObservers() {
    this.observers.forEach(observer => observer.update());
  }
}

// Observer
class Observer {
  constructor(name) {
    this.name = name;
  }

  update() {
    console.log(`${this.name} has been notified of the change.`);
  }
}

// Usage
const subject = new Subject();
const observer1 = new Observer("Observer 1");
const observer2 = new Observer("Observer 2");

subject.addObserver(observer1);
subject.addObserver(observer2);

subject.notifyObservers(); // Output: Observer 1 has been notified of the change.
                            //         Observer 2 has been notified of the change.
```

### Python Example:

```python
# Subject
class Subject:
    def __init__(self):
        self.observers = []

    def add_observer(self, observer):
        self.observers.append(observer)

    def remove_observer(self, observer):
        self.observers.remove(observer)

    def notify_observers(self):
        for observer in self.observers:
            observer.update()

# Observer
class Observer:
    def __init__(self, name):
        self.name = name

    def update(self):
        print(f"{self.name} has been notified of the change.")

# Usage
subject = Subject()
observer1 = Observer("Observer 1")
observer2 = Observer("Observer 2")

subject.add_observer(observer1)
subject.add_observer(observer2)

subject.notify_observers()  # Output: Observer 1 has been notified of the change.
                            #         Observer 2 has been notified of the change.
```

### Java Example:

```java
import java.util.ArrayList;
import java.util.List;

// Subject
class Subject {
    private List<Observer> observers = new ArrayList<>();

    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update();
        }
    }
}

// Observer
class Observer {
    private String name;

    public Observer(String name) {
        this.name = name;
    }

    public void update() {
        System.out.println(name + " has been notified of the change.");
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        Subject subject = new Subject();
        Observer observer1 = new Observer("Observer 1");
        Observer observer2 = new Observer("Observer 2");

        subject.addObserver(observer1);
        subject.addObserver(observer2);

        subject.notifyObservers();
    }
}
```

### Pros and Cons of Observer Design Pattern:

#### Pros:
1. Allows for loosely coupled communication between objects.
2. Supports a one-to-many relationship between objects.
3. Enables objects to be easily added or removed as observers without affecting other parts of the system.
4. Encourages the principle of separation of concerns by keeping the subject and observers separate.

#### Cons:
1. Can lead to potential memory leaks if observers are not properly removed when they are no longer needed.
2. Overuse of observers can make code harder to understand and maintain.
3. In some cases, the order of notification to observers may be important and difficult to manage.

### Real-World Scenario:

Consider a weather monitoring system where multiple displays need to be updated whenever the weather conditions change. 
  Each display acts as an observer, and the weather station serves as the subject. When the weather data is updated, all registered displays (observers) are notified and update their information accordingly.
  This decouples the weather station from the individual displays, allowing for flexibility and ease of maintenance in the system.


------------ Function -----------------
function  YoutubeChahanle (){
    this.subscribelist = [];
    this.subscribe = function(subscriber) {
        this.subscribelist.push(subscriber)
    }
     this.unsubscribe = function(subscriber){
      this.subscribelist = this.subscribelist.filter(sub=>sub.id != subscriber.id)
    }
    this.notifyme = function(){
        for(let sub of  this.subscribelist ){
            console.log(`hi ${sub.name}, Now your items are  available `)
        }
    }
}

let newchanl = new YoutubeChahanle()

var sub1 = newchanl.subscribe({id:1,name:"Rajni"})
var sub2 = newchanl.subscribe({id:2,name:"V"})
var sub3 = newchanl.subscribe({id:3,name:"H"})
